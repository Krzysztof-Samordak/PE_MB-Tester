//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000Digital : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000Digital(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000Digital obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000Digital() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000Digital(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


    public short InputData
    {
        get { return GetInputData(); }
    }

    public short OutputData
    {
        get { return GetOutputData(); }
        set { SetOutputData(value); }
    }

    public bool BusTriggerOutputEnabled
    {
        get { return GetBusTriggerOutputEnabled(); }
        set { SetBusTriggerOutputEnabled(value); }
    }

  public void SetDigitalPinPolarity(int pinIndex, Keysight.KtEL30000.Polarity pinPolarity) {
    KtEL30000CppApiPINVOKE.KtEL30000Digital_SetDigitalPinPolarity(swigCPtr, pinIndex, (int)pinPolarity);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Keysight.KtEL30000.Polarity GetDigitalPinPolarity(int pinIndex) {
    Keysight.KtEL30000.Polarity ret = (Keysight.KtEL30000.Polarity)KtEL30000CppApiPINVOKE.KtEL30000Digital_GetDigitalPinPolarity(swigCPtr, pinIndex);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Keysight.KtEL30000.DigitalPinFunctionType GetDigitalPinFunction(int pinIndex) {
    Keysight.KtEL30000.DigitalPinFunctionType ret = (Keysight.KtEL30000.DigitalPinFunctionType)KtEL30000CppApiPINVOKE.KtEL30000Digital_GetDigitalPinFunction(swigCPtr, pinIndex);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDigitalPinFunction(int pinIndex, Keysight.KtEL30000.DigitalPinFunctionType pinFunction) {
    KtEL30000CppApiPINVOKE.KtEL30000Digital_SetDigitalPinFunction(swigCPtr, pinIndex, (int)pinFunction);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public short GetInputData() {
    short ret = KtEL30000CppApiPINVOKE.KtEL30000Digital_GetInputData(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public short GetOutputData() {
    short ret = KtEL30000CppApiPINVOKE.KtEL30000Digital_GetOutputData(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetOutputData(short value) {
    KtEL30000CppApiPINVOKE.KtEL30000Digital_SetOutputData(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetBusTriggerOutputEnabled() {
    bool ret = KtEL30000CppApiPINVOKE.KtEL30000Digital_GetBusTriggerOutputEnabled(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetBusTriggerOutputEnabled(bool value) {
    KtEL30000CppApiPINVOKE.KtEL30000Digital_SetBusTriggerOutputEnabled(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
