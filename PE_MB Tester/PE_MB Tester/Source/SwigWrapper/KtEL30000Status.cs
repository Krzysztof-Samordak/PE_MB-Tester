//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000Status : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000Status(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000Status obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000Status() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000Status(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public KtEL30000StatusOperation Operation_
    {
        get { return Operation(); }
    }
    public KtEL30000StatusQuestionable Questionable_
    {
        get { return Questionable(); }
    }
    public KtEL30000StatusStandardEvent StandardEvent_
    {
        get { return StandardEvent(); }
    }

    public Keysight.KtEL30000.StatusByteFlags ServiceRequestEnableRegister
    {
        get { return GetServiceRequestEnableRegister(); }
        set { SetServiceRequestEnableRegister(value); }
    }
    private ServiceRequestKtEventHandlerAdapter _ServiceRequestEventAdapter = null;
    public  ServiceRequestKtEventHandlerAdapter ServiceRequestEventAdapter
    {
        get
        {
            if (_ServiceRequestEventAdapter == null)
                _ServiceRequestEventAdapter = new ServiceRequestKtEventHandlerAdapter(this.GetServiceRequestEvent());
            return _ServiceRequestEventAdapter;
        }
    }

  public void Clear() {
    KtEL30000CppApiPINVOKE.KtEL30000Status_Clear(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Preset() {
    KtEL30000CppApiPINVOKE.KtEL30000Status_Preset(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Keysight.KtEL30000.StatusByteFlags SerialPoll() {
    Keysight.KtEL30000.StatusByteFlags ret = (Keysight.KtEL30000.StatusByteFlags)KtEL30000CppApiPINVOKE.KtEL30000Status_SerialPoll(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DisableServiceRequestEvents() {
    KtEL30000CppApiPINVOKE.KtEL30000Status_DisableServiceRequestEvents(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Keysight.KtEL30000.StatusByteFlags ReadStatusByteRegister() {
    Keysight.KtEL30000.StatusByteFlags ret = (Keysight.KtEL30000.StatusByteFlags)KtEL30000CppApiPINVOKE.KtEL30000Status_ReadStatusByteRegister(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void EnableServiceRequestEvents() {
    KtEL30000CppApiPINVOKE.KtEL30000Status_EnableServiceRequestEvents(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public KtEL30000StatusOperation Operation() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000Status_Operation(swigCPtr);
    KtEL30000StatusOperation ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000StatusOperation(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public KtEL30000StatusQuestionable Questionable() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000Status_Questionable(swigCPtr);
    KtEL30000StatusQuestionable ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000StatusQuestionable(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public KtEL30000StatusStandardEvent StandardEvent() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000Status_StandardEvent(swigCPtr);
    KtEL30000StatusStandardEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000StatusStandardEvent(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Keysight.KtEL30000.StatusByteFlags GetServiceRequestEnableRegister() {
    Keysight.KtEL30000.StatusByteFlags ret = (Keysight.KtEL30000.StatusByteFlags)KtEL30000CppApiPINVOKE.KtEL30000Status_GetServiceRequestEnableRegister(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetServiceRequestEnableRegister(Keysight.KtEL30000.StatusByteFlags value) {
    KtEL30000CppApiPINVOKE.KtEL30000Status_SetServiceRequestEnableRegister(swigCPtr, (int)value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public ServiceRequestKtEvent GetServiceRequestEvent() {
    ServiceRequestKtEvent ret = new ServiceRequestKtEvent(KtEL30000CppApiPINVOKE.KtEL30000Status_GetServiceRequestEvent(swigCPtr), false);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
