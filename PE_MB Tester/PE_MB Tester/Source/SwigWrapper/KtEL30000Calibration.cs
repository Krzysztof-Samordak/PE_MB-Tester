//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000Calibration : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000Calibration(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000Calibration obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000Calibration() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000Calibration(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


    public int SecureCode
    {
        set { SetSecureCode(value); }
    }

    public string Message
    {
        get { return GetMessage(); }
        set { SetMessage(value); }
    }

    public bool AutoSaveEnabled
    {
        get { return GetAutoSaveEnabled(); }
        set { SetAutoSaveEnabled(value); }
    }

  public void SetSecureCodeEnabled(bool state, string passCode) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetSecureCodeEnabled(swigCPtr, state, passCode);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetSecureStateEnabled() {
    bool ret = KtEL30000CppApiPINVOKE.KtEL30000Calibration_GetSecureStateEnabled(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetCount() {
    int ret = KtEL30000CppApiPINVOKE.KtEL30000Calibration_GetCount(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInputCurrentLowLevel(Keysight.KtEL30000.MinMaxDefMode currentLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetInputCurrentLowLevel(swigCPtr, (int)currentLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInputCurrentLowData(double current, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetInputCurrentLowData(swigCPtr, current, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInputVoltageLowLevel(Keysight.KtEL30000.MinMaxDefMode voltageLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetInputVoltageLowLevel(swigCPtr, (int)voltageLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCurrentLimitLevel(Keysight.KtEL30000.MinMaxDefMode currentLimitLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetCurrentLimitLevel(swigCPtr, (int)currentLimitLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInputVoltageLowData(double voltage, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetInputVoltageLowData(swigCPtr, voltage, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCurrentLimitData(double limitCurrentData, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetCurrentLimitData(swigCPtr, limitCurrentData, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInputVoltageHighData(double voltage, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetInputVoltageHighData(swigCPtr, voltage, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInputCurrentMediumLevel(Keysight.KtEL30000.MinMaxDefMode currentLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetInputCurrentMediumLevel(swigCPtr, (int)currentLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInputCurrentHighLevel(Keysight.KtEL30000.CalibrationCurrentLevel currentLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetInputCurrentHighLevel(swigCPtr, (int)currentLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInputCurrentMediumData(double current, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetInputCurrentMediumData(swigCPtr, current, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInputCurrentHighData(double current, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetInputCurrentHighData(swigCPtr, current, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInputVoltageHighLevel(Keysight.KtEL30000.MinMaxDefMode voltageLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetInputVoltageHighLevel(swigCPtr, (int)voltageLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Save() {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_Save(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSecureCode(int value) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetSecureCode(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetMessage() {
    string ret = KtEL30000CppApiPINVOKE.KtEL30000Calibration_GetMessage(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMessage(string value) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetMessage(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetAutoSaveEnabled() {
    bool ret = KtEL30000CppApiPINVOKE.KtEL30000Calibration_GetAutoSaveEnabled(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAutoSaveEnabled(bool value) {
    KtEL30000CppApiPINVOKE.KtEL30000Calibration_SetAutoSaveEnabled(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
