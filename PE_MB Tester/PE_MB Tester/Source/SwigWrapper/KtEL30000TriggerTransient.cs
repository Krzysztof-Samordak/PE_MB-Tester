//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000TriggerTransient : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000TriggerTransient(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000TriggerTransient obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000TriggerTransient() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000TriggerTransient(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public Keysight.KtEL30000.TransientTriggerSource[] GetTriggerSource(string channelList)
    {
        var ret = default(Keysight.KtEL30000.TransientTriggerSource[]);
        this.GetTriggerSource(channelList, ref ret);
        return ret;
    }
    public Ivi.Driver.PrecisionTimeSpan[] GetDelay(string channelList)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan[]);
        this.GetDelay(channelList, out ret);
        return ret;
    }
    public Ivi.Driver.PrecisionTimeSpan[] GetDelay(Keysight.KtEL30000.MinMaxDefMode time, string channelList)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan[]);
        this.GetDelay(time, channelList, out ret);
        return ret;
    }

  public void Immediate(string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000TriggerTransient_Immediate(swigCPtr, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTriggerSource(string channelList, ref Keysight.KtEL30000.TransientTriggerSource[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.EnumArrayMarshaler<Keysight.KtEL30000.TransientTriggerSource>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000TriggerTransient_GetTriggerSource(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetTriggerSource(Keysight.KtEL30000.TransientTriggerSource transientTriggerSource, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000TriggerTransient_SetTriggerSource(swigCPtr, (int)transientTriggerSource, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetDelay(string channelList, out Ivi.Driver.PrecisionTimeSpan[] OUTPUT) {
    var marshaler_OUTPUT = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000TriggerTransient_GetDelay__SWIG_0(swigCPtr, channelList, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan[]);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void GetDelay(Keysight.KtEL30000.MinMaxDefMode time, string channelList, out Ivi.Driver.PrecisionTimeSpan[] OUTPUT) {
    var marshaler_OUTPUT = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000TriggerTransient_GetDelay__SWIG_1(swigCPtr, (int)time, channelList, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan[]);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void SetDelay(Keysight.KtEL30000.MinMaxDefMode time, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000TriggerTransient_SetDelay__SWIG_0(swigCPtr, (int)time, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDelay(Ivi.Driver.PrecisionTimeSpan time, string channelList) {
    var marshaler_time = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_time = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_time.BufferSize);
    marshaler_time.CSharpToBytes(time, marshalBuffer_time);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000TriggerTransient_SetDelay__SWIG_1(swigCPtr, marshalBuffer_time.PinnedBytes, channelList);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_time.Dispose();
    }
  }

}

}
