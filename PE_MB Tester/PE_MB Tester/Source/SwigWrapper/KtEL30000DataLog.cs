//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000DataLog : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000DataLog(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000DataLog obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000DataLog() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000DataLog(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


    public double TriggerOffset
    {
        get { return GetTriggerOffset(); }
        set { SetTriggerOffset(value); }
    }

    public Ivi.Driver.PrecisionTimeSpan SampleInterval
    {
        get
        {
            var retValue = default(Ivi.Driver.PrecisionTimeSpan);
            GetSampleInterval(out retValue);
            return retValue;
        }
        set { SetSampleInterval(value); }
    }

    public Ivi.Driver.PrecisionTimeSpan SampleTime
    {
        get
        {
            var retValue = default(Ivi.Driver.PrecisionTimeSpan);
            GetSampleTime(out retValue);
            return retValue;
        }
        set { SetSampleTime(value); }
    }

    public bool MinMaxDataLogEnabled
    {
        get { return GetMinMaxDataLogEnabled(); }
        set { SetMinMaxDataLogEnabled(value); }
    }
    public Ivi.Driver.PrecisionTimeSpan GetSampleInterval(Keysight.KtEL30000.MinMaxDefMode sampleIntervalTime)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan);
        this.GetSampleInterval(sampleIntervalTime, out ret);
        return ret;
    }
    public Ivi.Driver.PrecisionTimeSpan GetSampleTime(Keysight.KtEL30000.MinMaxDefMode sampleTime)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan);
        this.GetSampleTime(sampleTime, out ret);
        return ret;
    }
    public System.Double[] Fetch(int numberOfLoggedData, string channelList)
    {
        var ret = default(System.Double[]);
        this.Fetch(numberOfLoggedData, channelList, ref ret);
        return ret;
    }

  public void SetCurrentDataLogEnabled(bool currentDataLogEnabled, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000DataLog_SetCurrentDataLogEnabled(swigCPtr, currentDataLogEnabled, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVoltageDataLogEnabled(bool voltageDataLogEnabled, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000DataLog_SetVoltageDataLogEnabled(swigCPtr, voltageDataLogEnabled, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSampleInterval(Keysight.KtEL30000.MinMaxDefMode sampleIntervalTime) {
    KtEL30000CppApiPINVOKE.KtEL30000DataLog_SetSampleInterval__SWIG_0(swigCPtr, (int)sampleIntervalTime);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetSampleInterval(Keysight.KtEL30000.MinMaxDefMode sampleIntervalTime, out Ivi.Driver.PrecisionTimeSpan OUTPUT) {
    var marshaler_OUTPUT = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000DataLog_GetSampleInterval__SWIG_0(swigCPtr, (int)sampleIntervalTime, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void GetSampleTime(Keysight.KtEL30000.MinMaxDefMode sampleTime, out Ivi.Driver.PrecisionTimeSpan OUTPUT) {
    var marshaler_OUTPUT = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000DataLog_GetSampleTime__SWIG_0(swigCPtr, (int)sampleTime, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void SetSampleTime(Keysight.KtEL30000.MinMaxDefMode sampleTime) {
    KtEL30000CppApiPINVOKE.KtEL30000DataLog_SetSampleTime__SWIG_0(swigCPtr, (int)sampleTime);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BooleanVector GetCurrentDataLogEnabled(string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000DataLog_GetCurrentDataLogEnabled(swigCPtr, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BooleanVector GetVoltageDataLogEnabled(string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000DataLog_GetVoltageDataLogEnabled(swigCPtr, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Initiate(string filename) {
    KtEL30000CppApiPINVOKE.KtEL30000DataLog_Initiate(swigCPtr, filename);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Abort() {
    KtEL30000CppApiPINVOKE.KtEL30000DataLog_Abort(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Fetch(int numberOfLoggedData, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000DataLog_Fetch(swigCPtr, numberOfLoggedData, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public double GetTriggerOffset() {
    double ret = KtEL30000CppApiPINVOKE.KtEL30000DataLog_GetTriggerOffset(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTriggerOffset(double value) {
    KtEL30000CppApiPINVOKE.KtEL30000DataLog_SetTriggerOffset(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetSampleInterval(out Ivi.Driver.PrecisionTimeSpan OUTPUT) {
    var marshaler_OUTPUT = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000DataLog_GetSampleInterval__SWIG_1(swigCPtr, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void SetSampleInterval(Ivi.Driver.PrecisionTimeSpan value) {
    var marshaler_value = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_value = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_value.BufferSize);
    marshaler_value.CSharpToBytes(value, marshalBuffer_value);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000DataLog_SetSampleInterval__SWIG_1(swigCPtr, marshalBuffer_value.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_value.Dispose();
    }
  }

  public void GetSampleTime(out Ivi.Driver.PrecisionTimeSpan OUTPUT) {
    var marshaler_OUTPUT = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000DataLog_GetSampleTime__SWIG_1(swigCPtr, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void SetSampleTime(Ivi.Driver.PrecisionTimeSpan value) {
    var marshaler_value = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_value = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_value.BufferSize);
    marshaler_value.CSharpToBytes(value, marshalBuffer_value);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000DataLog_SetSampleTime__SWIG_1(swigCPtr, marshalBuffer_value.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_value.Dispose();
    }
  }

  public bool GetMinMaxDataLogEnabled() {
    bool ret = KtEL30000CppApiPINVOKE.KtEL30000DataLog_GetMinMaxDataLogEnabled(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMinMaxDataLogEnabled(bool value) {
    KtEL30000CppApiPINVOKE.KtEL30000DataLog_SetMinMaxDataLogEnabled(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
