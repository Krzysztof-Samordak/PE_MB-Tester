//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000OperationConstantResistance : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000OperationConstantResistance(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000OperationConstantResistance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000OperationConstantResistance() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000OperationConstantResistance(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public KtEL30000OperationConstantResistanceSlew Slew_
    {
        get { return Slew(); }
    }
    public System.Double[] GetResistance(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetResistance(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetResistance(Keysight.KtEL30000.MinMaxDefMode levelValue, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetResistance(levelValue, channelList, ref ret);
        return ret;
    }
    public Keysight.KtEL30000.ResistanceMode[] GetMode(string channelList)
    {
        var ret = default(Keysight.KtEL30000.ResistanceMode[]);
        this.GetMode(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetTriggerLevel(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetTriggerLevel(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetTriggerLevel(Keysight.KtEL30000.MinMaxDefMode triggerLevel, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetTriggerLevel(triggerLevel, channelList, ref ret);
        return ret;
    }
    public System.Double[] GetResistanceRange(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetResistanceRange(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetResistanceRange(Keysight.KtEL30000.MinMaxDefMode range, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetResistanceRange(range, channelList, ref ret);
        return ret;
    }

  public void GetResistance(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_GetResistance__SWIG_0(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetResistance(Keysight.KtEL30000.MinMaxDefMode levelValue, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_GetResistance__SWIG_1(swigCPtr, (int)levelValue, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetMode(string channelList, ref Keysight.KtEL30000.ResistanceMode[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.EnumArrayMarshaler<Keysight.KtEL30000.ResistanceMode>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_GetMode(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetTriggerLevel(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_GetTriggerLevel__SWIG_0(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetTriggerLevel(Keysight.KtEL30000.MinMaxDefMode triggerLevel, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_GetTriggerLevel__SWIG_1(swigCPtr, (int)triggerLevel, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetResistance(Keysight.KtEL30000.MinMaxDefMode resistanceValue, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_SetResistance__SWIG_0(swigCPtr, (int)resistanceValue, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetResistance(double resistanceValue, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_SetResistance__SWIG_1(swigCPtr, resistanceValue, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTriggerLevel(double triggerLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_SetTriggerLevel__SWIG_0(swigCPtr, triggerLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTriggerLevel(Keysight.KtEL30000.MinMaxDefMode triggerLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_SetTriggerLevel__SWIG_1(swigCPtr, (int)triggerLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetResistanceRange(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_GetResistanceRange__SWIG_0(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetResistanceRange(Keysight.KtEL30000.MinMaxDefMode range, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_GetResistanceRange__SWIG_1(swigCPtr, (int)range, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetResistanceRange(Keysight.KtEL30000.MinMaxDefMode range, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_SetResistanceRange__SWIG_0(swigCPtr, (int)range, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetResistanceRange(double range, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_SetResistanceRange__SWIG_1(swigCPtr, range, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMode(Keysight.KtEL30000.ResistanceMode mode, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_SetMode(swigCPtr, (int)mode, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public KtEL30000OperationConstantResistanceSlew Slew() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000OperationConstantResistance_Slew(swigCPtr);
    KtEL30000OperationConstantResistanceSlew ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000OperationConstantResistanceSlew(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
