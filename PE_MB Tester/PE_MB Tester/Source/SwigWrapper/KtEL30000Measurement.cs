//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000Measurement : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000Measurement(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000Measurement obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000Measurement() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000Measurement(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public System.Double[] Fetch(Keysight.KtEL30000.MeasurementFunction measurementFunction, Keysight.KtEL30000.MeasurementType measurementType, string channelList)
    {
        var ret = default(System.Double[]);
        this.Fetch(measurementFunction, measurementType, channelList, ref ret);
        return ret;
    }
    public System.Double[] Measure(Keysight.KtEL30000.MeasurementFunction measurementFunction, Keysight.KtEL30000.MeasurementType measurementType, string channelList)
    {
        var ret = default(System.Double[]);
        this.Measure(measurementFunction, measurementType, channelList, ref ret);
        return ret;
    }
    public System.Double[] Fetch(Keysight.KtEL30000.MeasurementFunction measurementFunction, string channelList)
    {
        var ret = default(System.Double[]);
        this.Fetch(measurementFunction, channelList, ref ret);
        return ret;
    }
    public System.Double[] Measure(Keysight.KtEL30000.MeasurementFunction measurementFunction, string channelList)
    {
        var ret = default(System.Double[]);
        this.Measure(measurementFunction, channelList, ref ret);
        return ret;
    }

  public void Fetch(Keysight.KtEL30000.MeasurementFunction measurementFunction, Keysight.KtEL30000.MeasurementType measurementType, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Measurement_Fetch__SWIG_0(swigCPtr, (int)measurementFunction, (int)measurementType, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void Measure(Keysight.KtEL30000.MeasurementFunction measurementFunction, Keysight.KtEL30000.MeasurementType measurementType, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Measurement_Measure__SWIG_0(swigCPtr, (int)measurementFunction, (int)measurementType, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetVoltageMeasurementEnabled(bool voltageMeasurementEnabled, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Measurement_SetVoltageMeasurementEnabled(swigCPtr, voltageMeasurementEnabled, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BooleanVector GetVoltageMeasurementEnabled(string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000Measurement_GetVoltageMeasurementEnabled(swigCPtr, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BooleanVector GetCurrentMeasurementEnabled(string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000Measurement_GetCurrentMeasurementEnabled(swigCPtr, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCurrentMeasurementEnabled(bool currentMeasurementEnabled, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Measurement_SetCurrentMeasurementEnabled(swigCPtr, currentMeasurementEnabled, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Fetch(Keysight.KtEL30000.MeasurementFunction measurementFunction, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Measurement_Fetch__SWIG_1(swigCPtr, (int)measurementFunction, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void Measure(Keysight.KtEL30000.MeasurementFunction measurementFunction, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Measurement_Measure__SWIG_1(swigCPtr, (int)measurementFunction, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

}

}
