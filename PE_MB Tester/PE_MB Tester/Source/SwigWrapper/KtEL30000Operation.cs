//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000Operation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000Operation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000Operation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000Operation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000Operation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public KtEL30000OperationConstantCurrent ConstantCurrent_
    {
        get { return ConstantCurrent(); }
    }
    public KtEL30000OperationConstantVoltage ConstantVoltage_
    {
        get { return ConstantVoltage(); }
    }
    public KtEL30000OperationConstantResistance ConstantResistance_
    {
        get { return ConstantResistance(); }
    }
    public KtEL30000OperationConstantPower ConstantPower_
    {
        get { return ConstantPower(); }
    }

    public Keysight.KtEL30000.PairMode PairMode
    {
        get { return GetPairMode(); }
        set { SetPairMode(value); }
    }

    public bool InputShortEnabled
    {
        get { return GetInputShortEnabled(); }
        set { SetInputShortEnabled(value); }
    }
    public Keysight.KtEL30000.OperationMode[] GetConfigurationMode(string channelList)
    {
        var ret = default(Keysight.KtEL30000.OperationMode[]);
        this.GetConfigurationMode(channelList, ref ret);
        return ret;
    }

  public void ConfigureMode(Keysight.KtEL30000.OperationMode mode, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Operation_ConfigureMode(swigCPtr, (int)mode, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetConfigurationMode(string channelList, ref Keysight.KtEL30000.OperationMode[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.EnumArrayMarshaler<Keysight.KtEL30000.OperationMode>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Operation_GetConfigurationMode(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void ClearProtection(string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Operation_ClearProtection(swigCPtr, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public KtEL30000OperationConstantCurrent ConstantCurrent() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000Operation_ConstantCurrent(swigCPtr);
    KtEL30000OperationConstantCurrent ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000OperationConstantCurrent(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public KtEL30000OperationConstantVoltage ConstantVoltage() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000Operation_ConstantVoltage(swigCPtr);
    KtEL30000OperationConstantVoltage ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000OperationConstantVoltage(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public KtEL30000OperationConstantResistance ConstantResistance() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000Operation_ConstantResistance(swigCPtr);
    KtEL30000OperationConstantResistance ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000OperationConstantResistance(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public KtEL30000OperationConstantPower ConstantPower() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000Operation_ConstantPower(swigCPtr);
    KtEL30000OperationConstantPower ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000OperationConstantPower(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Keysight.KtEL30000.PairMode GetPairMode() {
    Keysight.KtEL30000.PairMode ret = (Keysight.KtEL30000.PairMode)KtEL30000CppApiPINVOKE.KtEL30000Operation_GetPairMode(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPairMode(Keysight.KtEL30000.PairMode value) {
    KtEL30000CppApiPINVOKE.KtEL30000Operation_SetPairMode(swigCPtr, (int)value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetInputShortEnabled() {
    bool ret = KtEL30000CppApiPINVOKE.KtEL30000Operation_GetInputShortEnabled(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInputShortEnabled(bool value) {
    KtEL30000CppApiPINVOKE.KtEL30000Operation_SetInputShortEnabled(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
