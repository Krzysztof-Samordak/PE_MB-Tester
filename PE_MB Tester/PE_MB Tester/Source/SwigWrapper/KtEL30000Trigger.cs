//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000Trigger : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000Trigger(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000Trigger obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000Trigger() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000Trigger(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public KtEL30000TriggerAcquire Acquire_
    {
        get { return Acquire(); }
    }
    public KtEL30000TriggerTransient Transient_
    {
        get { return Transient(); }
    }
    public KtEL30000TriggerDlog Dlog_
    {
        get { return Dlog(); }
    }

  public KtEL30000TriggerAcquire Acquire() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000Trigger_Acquire(swigCPtr);
    KtEL30000TriggerAcquire ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000TriggerAcquire(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public KtEL30000TriggerTransient Transient() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000Trigger_Transient(swigCPtr);
    KtEL30000TriggerTransient ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000TriggerTransient(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public KtEL30000TriggerDlog Dlog() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000Trigger_Dlog(swigCPtr);
    KtEL30000TriggerDlog ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000TriggerDlog(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
