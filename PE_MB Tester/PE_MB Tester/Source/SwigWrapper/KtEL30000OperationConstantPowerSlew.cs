//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000OperationConstantPowerSlew : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000OperationConstantPowerSlew(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000OperationConstantPowerSlew obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000OperationConstantPowerSlew() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000OperationConstantPowerSlew(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public System.Double[] GetNegativeSlewRate(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetNegativeSlewRate(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetNegativeSlewRate(Keysight.KtEL30000.MinMaxDefMode slewRate, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetNegativeSlewRate(slewRate, channelList, ref ret);
        return ret;
    }
    public System.Double[] GetPositiveSlewRate(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetPositiveSlewRate(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetPositiveSlewRate(Keysight.KtEL30000.MinMaxDefMode slewRate, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetPositiveSlewRate(slewRate, channelList, ref ret);
        return ret;
    }
    public System.Double[] GetSlewRate(Keysight.KtEL30000.MinMaxDefMode slewRate, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetSlewRate(slewRate, channelList, ref ret);
        return ret;
    }

  public void GetNegativeSlewRate(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_GetNegativeSlewRate__SWIG_0(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetNegativeSlewRate(Keysight.KtEL30000.MinMaxDefMode slewRate, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_GetNegativeSlewRate__SWIG_1(swigCPtr, (int)slewRate, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public BooleanVector GetNegativeSlewRateMaximumEnabled(string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_GetNegativeSlewRateMaximumEnabled(swigCPtr, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetPositiveSlewRate(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_GetPositiveSlewRate__SWIG_0(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetPositiveSlewRate(Keysight.KtEL30000.MinMaxDefMode slewRate, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_GetPositiveSlewRate__SWIG_1(swigCPtr, (int)slewRate, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public BooleanVector GetPositiveSlewRateMaximumEnabled(string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_GetPositiveSlewRateMaximumEnabled(swigCPtr, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetSlewRate(Keysight.KtEL30000.MinMaxDefMode slewRate, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_GetSlewRate(swigCPtr, (int)slewRate, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public BooleanVector GetSlewRateTrackingEnabled(string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_GetSlewRateTrackingEnabled(swigCPtr, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetNegativeSlewRate(double slewRate, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_SetNegativeSlewRate__SWIG_0(swigCPtr, slewRate, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNegativeSlewRate(Keysight.KtEL30000.MinMaxDefMode slewRate, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_SetNegativeSlewRate__SWIG_1(swigCPtr, (int)slewRate, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNegativeSlewRateMaximumEnabled(bool maxSlewRateEnabled, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_SetNegativeSlewRateMaximumEnabled(swigCPtr, maxSlewRateEnabled, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPositiveSlewRate(double slewRate, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_SetPositiveSlewRate__SWIG_0(swigCPtr, slewRate, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPositiveSlewRate(Keysight.KtEL30000.MinMaxDefMode slewRate, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_SetPositiveSlewRate__SWIG_1(swigCPtr, (int)slewRate, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPositiveSlewRateMaximumEnabled(bool maxSlewRateEnabled, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_SetPositiveSlewRateMaximumEnabled(swigCPtr, maxSlewRateEnabled, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSlewRateTrackingEnabled(bool coupleEnabled, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerSlew_SetSlewRateTrackingEnabled(swigCPtr, coupleEnabled, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
