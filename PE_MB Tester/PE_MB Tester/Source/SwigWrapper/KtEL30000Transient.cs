//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000Transient : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000Transient(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000Transient obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000Transient() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000Transient(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public Keysight.KtEL30000.TransientMode[] GetMode(string channelList)
    {
        var ret = default(Keysight.KtEL30000.TransientMode[]);
        this.GetMode(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetFrequency(Keysight.KtEL30000.MinMaxDefMode frequency, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetFrequency(frequency, channelList, ref ret);
        return ret;
    }
    public System.Double[] GetFrequency(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetFrequency(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetDutyCycle(Keysight.KtEL30000.MinMaxDefMode dutyCycle, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetDutyCycle(dutyCycle, channelList, ref ret);
        return ret;
    }
    public System.Double[] GetDutyCycle(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetDutyCycle(channelList, ref ret);
        return ret;
    }
    public System.Int32[] GetCount(Keysight.KtEL30000.MinMaxDefMode count, string channelList)
    {
        var ret = default(System.Int32[]);
        this.GetCount(count, channelList, ref ret);
        return ret;
    }
    public System.Int32[] GetCount(string channelList)
    {
        var ret = default(System.Int32[]);
        this.GetCount(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetTransientCurrentLevel(Keysight.KtEL30000.MinMaxDefMode transientCurrentLevel, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetTransientCurrentLevel(transientCurrentLevel, channelList, ref ret);
        return ret;
    }
    public System.Double[] GetTransientCurrentLevel(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetTransientCurrentLevel(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetTransientPowerLevel(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetTransientPowerLevel(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetTransientPowerLevel(Keysight.KtEL30000.MinMaxDefMode transientPowerLevel, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetTransientPowerLevel(transientPowerLevel, channelList, ref ret);
        return ret;
    }
    public System.Double[] GetTransientVoltageLevel(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetTransientVoltageLevel(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetTransientVoltageLevel(Keysight.KtEL30000.MinMaxDefMode transientVoltageLevel, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetTransientVoltageLevel(transientVoltageLevel, channelList, ref ret);
        return ret;
    }
    public System.Double[] GetTransientResistanceLevel(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetTransientResistanceLevel(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetTransientResistanceLevel(Keysight.KtEL30000.MinMaxDefMode transientResistanceLevel, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetTransientResistanceLevel(transientResistanceLevel, channelList, ref ret);
        return ret;
    }
    public Ivi.Driver.PrecisionTimeSpan[] GetPulseWidth(string channelList)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan[]);
        this.GetPulseWidth(channelList, out ret);
        return ret;
    }
    public Ivi.Driver.PrecisionTimeSpan[] GetPulseWidth(Keysight.KtEL30000.MinMaxDefMode pulseWidth, string channelList)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan[]);
        this.GetPulseWidth(pulseWidth, channelList, out ret);
        return ret;
    }

  public void SetMode(Keysight.KtEL30000.TransientMode transientMode, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetMode(swigCPtr, (int)transientMode, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetMode(string channelList, ref Keysight.KtEL30000.TransientMode[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.EnumArrayMarshaler<Keysight.KtEL30000.TransientMode>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetMode(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetFrequency(Keysight.KtEL30000.MinMaxDefMode frequency, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetFrequency__SWIG_0(swigCPtr, (int)frequency, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetFrequency(Keysight.KtEL30000.MinMaxDefMode frequency, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetFrequency__SWIG_0(swigCPtr, (int)frequency, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetFrequency(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetFrequency__SWIG_1(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetFrequency(double frequency, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetFrequency__SWIG_1(swigCPtr, frequency, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetDutyCycle(Keysight.KtEL30000.MinMaxDefMode dutyCycle, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetDutyCycle__SWIG_0(swigCPtr, (int)dutyCycle, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetDutyCycle(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetDutyCycle__SWIG_1(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetDutyCycle(Keysight.KtEL30000.MinMaxDefMode dutyCycle, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetDutyCycle__SWIG_0(swigCPtr, (int)dutyCycle, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDutyCycle(double dutyCycle, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetDutyCycle__SWIG_1(swigCPtr, dutyCycle, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetCount(Keysight.KtEL30000.MinMaxDefMode count, string channelList, ref System.Int32[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Int32>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetCount__SWIG_0(swigCPtr, (int)count, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetCount(string channelList, ref System.Int32[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Int32>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetCount__SWIG_1(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetCount(Keysight.KtEL30000.MinMaxDefMode count, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetCount__SWIG_0(swigCPtr, (int)count, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCount(int count, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetCount__SWIG_1(swigCPtr, count, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTransientCurrentLevel(Keysight.KtEL30000.MinMaxDefMode transientCurrentLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetTransientCurrentLevel__SWIG_0(swigCPtr, (int)transientCurrentLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTransientCurrentLevel(Keysight.KtEL30000.MinMaxDefMode transientCurrentLevel, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetTransientCurrentLevel__SWIG_0(swigCPtr, (int)transientCurrentLevel, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetTransientCurrentLevel(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetTransientCurrentLevel__SWIG_1(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetTransientCurrentLevel(double transientCurrentLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetTransientCurrentLevel__SWIG_1(swigCPtr, transientCurrentLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTransientPowerLevel(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetTransientPowerLevel__SWIG_0(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetTransientPowerLevel(Keysight.KtEL30000.MinMaxDefMode transientPowerLevel, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetTransientPowerLevel__SWIG_1(swigCPtr, (int)transientPowerLevel, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetTransientPowerLevel(Keysight.KtEL30000.MinMaxDefMode transientPowerLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetTransientPowerLevel__SWIG_0(swigCPtr, (int)transientPowerLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTransientPowerLevel(double transientPowerLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetTransientPowerLevel__SWIG_1(swigCPtr, transientPowerLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTransientVoltageLevel(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetTransientVoltageLevel__SWIG_0(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetTransientVoltageLevel(Keysight.KtEL30000.MinMaxDefMode transientVoltageLevel, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetTransientVoltageLevel__SWIG_1(swigCPtr, (int)transientVoltageLevel, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetTransientVoltageLevel(Keysight.KtEL30000.MinMaxDefMode transientVoltageLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetTransientVoltageLevel__SWIG_0(swigCPtr, (int)transientVoltageLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTransientVoltageLevel(double transientVoltageLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetTransientVoltageLevel__SWIG_1(swigCPtr, transientVoltageLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTransientResistanceLevel(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetTransientResistanceLevel__SWIG_0(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetTransientResistanceLevel(Keysight.KtEL30000.MinMaxDefMode transientResistanceLevel, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetTransientResistanceLevel__SWIG_1(swigCPtr, (int)transientResistanceLevel, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetTransientResistanceLevel(Keysight.KtEL30000.MinMaxDefMode transientResistanceLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetTransientResistanceLevel__SWIG_0(swigCPtr, (int)transientResistanceLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTransientResistanceLevel(double transientResistanceLevel, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetTransientResistanceLevel__SWIG_1(swigCPtr, transientResistanceLevel, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetPulseWidth(string channelList, out Ivi.Driver.PrecisionTimeSpan[] OUTPUT) {
    var marshaler_OUTPUT = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetPulseWidth__SWIG_0(swigCPtr, channelList, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan[]);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void GetPulseWidth(Keysight.KtEL30000.MinMaxDefMode pulseWidth, string channelList, out Ivi.Driver.PrecisionTimeSpan[] OUTPUT) {
    var marshaler_OUTPUT = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_GetPulseWidth__SWIG_1(swigCPtr, (int)pulseWidth, channelList, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan[]);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void SetPulseWidth(Ivi.Driver.PrecisionTimeSpan pulseWidth, string channelList) {
    var marshaler_pulseWidth = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_pulseWidth = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_pulseWidth.BufferSize);
    marshaler_pulseWidth.CSharpToBytes(pulseWidth, marshalBuffer_pulseWidth);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000Transient_SetPulseWidth__SWIG_0(swigCPtr, marshalBuffer_pulseWidth.PinnedBytes, channelList);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_pulseWidth.Dispose();
    }
  }

  public void SetPulseWidth(Keysight.KtEL30000.MinMaxDefMode pulseWidth, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_SetPulseWidth__SWIG_1(swigCPtr, (int)pulseWidth, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initiate(string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_Initiate(swigCPtr, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InitiateContinuousTriggerEnabled(bool initiateContinuousEnabled, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_InitiateContinuousTriggerEnabled(swigCPtr, initiateContinuousEnabled, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BooleanVector IsInitiateContinuousTriggerEnabled(string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000Transient_IsInitiateContinuousTriggerEnabled(swigCPtr, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Abort(string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000Transient_Abort(swigCPtr, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
