//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000List : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000List(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000List obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000List() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000List(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public System.Int32[] GetCount(Keysight.KtEL30000.MinMaxDefMode count, string channelList)
    {
        var ret = default(System.Int32[]);
        this.GetCount(count, channelList, ref ret);
        return ret;
    }
    public System.Int32[] GetCount(string channelList)
    {
        var ret = default(System.Int32[]);
        this.GetCount(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetLevel(Keysight.KtEL30000.OperationMode mode, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetLevel(mode, channelList, ref ret);
        return ret;
    }
    public System.Int32[] GetNumberOfPoints(Keysight.KtEL30000.OperationMode mode, string channelList)
    {
        var ret = default(System.Int32[]);
        this.GetNumberOfPoints(mode, channelList, ref ret);
        return ret;
    }
    public Ivi.Driver.PrecisionTimeSpan[] GetDwellTime(string channelList)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan[]);
        this.GetDwellTime(channelList, out ret);
        return ret;
    }
    public System.Int32[] GetNumberOfDwellPoints(string channelList)
    {
        var ret = default(System.Int32[]);
        this.GetNumberOfDwellPoints(channelList, ref ret);
        return ret;
    }
    public Keysight.KtEL30000.AutoMode[] GetMode(string channelList)
    {
        var ret = default(Keysight.KtEL30000.AutoMode[]);
        this.GetMode(channelList, ref ret);
        return ret;
    }
    public System.Int32[] GetTriggerSignalOutputNumberOfPoint(Keysight.KtEL30000.ListTriggerSignalOutputMode listTriggerSignalOutputMode, string channelList)
    {
        var ret = default(System.Int32[]);
        this.GetTriggerSignalOutputNumberOfPoint(listTriggerSignalOutputMode, channelList, ref ret);
        return ret;
    }

  public void SetCount(int count, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000List_SetCount__SWIG_0(swigCPtr, count, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCount(Keysight.KtEL30000.MinMaxDefMode count, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000List_SetCount__SWIG_1(swigCPtr, (int)count, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetCount(Keysight.KtEL30000.MinMaxDefMode count, string channelList, ref System.Int32[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Int32>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000List_GetCount__SWIG_0(swigCPtr, (int)count, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetCount(string channelList, ref System.Int32[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Int32>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000List_GetCount__SWIG_1(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetLevel(Keysight.KtEL30000.OperationMode mode, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000List_GetLevel(swigCPtr, (int)mode, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetLevel(Keysight.KtEL30000.OperationMode mode, System.Double[] levelList, string channelList) {
    var marshaler_levelList = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_levelList = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_levelList.BufferSize);
    marshaler_levelList.CSharpToBytes(levelList, marshalBuffer_levelList);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000List_SetLevel(swigCPtr, (int)mode, marshalBuffer_levelList.PinnedBytes, channelList);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_levelList.Dispose();
    }
  }

  public void GetNumberOfPoints(Keysight.KtEL30000.OperationMode mode, string channelList, ref System.Int32[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Int32>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000List_GetNumberOfPoints(swigCPtr, (int)mode, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetDwellTime(Ivi.Driver.PrecisionTimeSpan[] dwellTimeList, string channelList) {
    var marshaler_dwellTimeList = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_dwellTimeList = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_dwellTimeList.BufferSize);
    marshaler_dwellTimeList.CSharpToBytes(dwellTimeList, marshalBuffer_dwellTimeList);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000List_SetDwellTime(swigCPtr, marshalBuffer_dwellTimeList.PinnedBytes, channelList);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_dwellTimeList.Dispose();
    }
  }

  public void GetDwellTime(string channelList, out Ivi.Driver.PrecisionTimeSpan[] OUTPUT) {
    var marshaler_OUTPUT = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000List_GetDwellTime(swigCPtr, channelList, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan[]);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void GetNumberOfDwellPoints(string channelList, ref System.Int32[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Int32>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000List_GetNumberOfDwellPoints(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetTerminationModeEnabled(bool lastStepValueEnabled, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000List_SetTerminationModeEnabled(swigCPtr, lastStepValueEnabled, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BooleanVector GetTerminationModeEnabled(string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000List_GetTerminationModeEnabled(swigCPtr, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMode(Keysight.KtEL30000.AutoMode mode, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000List_SetMode(swigCPtr, (int)mode, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetMode(string channelList, ref Keysight.KtEL30000.AutoMode[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.EnumArrayMarshaler<Keysight.KtEL30000.AutoMode>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000List_GetMode(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetTriggerSignalOutputEnabled(BooleanVector triggerSignalOutputEnabled, Keysight.KtEL30000.ListTriggerSignalOutputMode listTriggerSignalOutputMode, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000List_SetTriggerSignalOutputEnabled(swigCPtr, BooleanVector.getCPtr(triggerSignalOutputEnabled), (int)listTriggerSignalOutputMode, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BooleanVector GetTriggerSignalOutputEnabled(Keysight.KtEL30000.ListTriggerSignalOutputMode listTriggerSignalOutputMode, string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000List_GetTriggerSignalOutputEnabled(swigCPtr, (int)listTriggerSignalOutputMode, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetTriggerSignalOutputNumberOfPoint(Keysight.KtEL30000.ListTriggerSignalOutputMode listTriggerSignalOutputMode, string channelList, ref System.Int32[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Int32>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000List_GetTriggerSignalOutputNumberOfPoint(swigCPtr, (int)listTriggerSignalOutputMode, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

}

}
