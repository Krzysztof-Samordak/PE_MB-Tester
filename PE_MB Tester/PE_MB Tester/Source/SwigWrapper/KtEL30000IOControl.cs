//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000IOControl : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000IOControl(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000IOControl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000IOControl() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000IOControl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


    public string ChannelCouple
    {
        get { return GetChannelCouple(); }
        set { SetChannelCouple(value); }
    }

    public Keysight.KtEL30000.InhibitMode InhibitMode
    {
        get { return GetInhibitMode(); }
        set { SetInhibitMode(value); }
    }
    public Ivi.Driver.PrecisionTimeSpan[] GetRiseTimeDelay(string channelList)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan[]);
        this.GetRiseTimeDelay(channelList, out ret);
        return ret;
    }
    public Ivi.Driver.PrecisionTimeSpan[] GetRiseTimeDelay(Keysight.KtEL30000.MinMaxDefMode riseTimeDelay, string channelList)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan[]);
        this.GetRiseTimeDelay(riseTimeDelay, channelList, out ret);
        return ret;
    }
    public Ivi.Driver.PrecisionTimeSpan[] GetFallTimeDelay(string channelList)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan[]);
        this.GetFallTimeDelay(channelList, out ret);
        return ret;
    }
    public Ivi.Driver.PrecisionTimeSpan[] GetFallTimeDelay(Keysight.KtEL30000.MinMaxDefMode fallTimeDelay, string channelList)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan[]);
        this.GetFallTimeDelay(fallTimeDelay, channelList, out ret);
        return ret;
    }

  public void GetRiseTimeDelay(string channelList, out Ivi.Driver.PrecisionTimeSpan[] OUTPUT) {
    var marshaler_OUTPUT = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000IOControl_GetRiseTimeDelay__SWIG_0(swigCPtr, channelList, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan[]);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void GetRiseTimeDelay(Keysight.KtEL30000.MinMaxDefMode riseTimeDelay, string channelList, out Ivi.Driver.PrecisionTimeSpan[] OUTPUT) {
    var marshaler_OUTPUT = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000IOControl_GetRiseTimeDelay__SWIG_1(swigCPtr, (int)riseTimeDelay, channelList, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan[]);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void SetRiseTimeDelay(Keysight.KtEL30000.MinMaxDefMode riseTimeDelay, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000IOControl_SetRiseTimeDelay__SWIG_0(swigCPtr, (int)riseTimeDelay, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRiseTimeDelay(Ivi.Driver.PrecisionTimeSpan riseTimeDelay, string channelList) {
    var marshaler_riseTimeDelay = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_riseTimeDelay = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_riseTimeDelay.BufferSize);
    marshaler_riseTimeDelay.CSharpToBytes(riseTimeDelay, marshalBuffer_riseTimeDelay);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000IOControl_SetRiseTimeDelay__SWIG_1(swigCPtr, marshalBuffer_riseTimeDelay.PinnedBytes, channelList);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_riseTimeDelay.Dispose();
    }
  }

  public void SetFallTimeDelay(Ivi.Driver.PrecisionTimeSpan fallTimeDelay, string channelList) {
    var marshaler_fallTimeDelay = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_fallTimeDelay = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_fallTimeDelay.BufferSize);
    marshaler_fallTimeDelay.CSharpToBytes(fallTimeDelay, marshalBuffer_fallTimeDelay);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000IOControl_SetFallTimeDelay__SWIG_0(swigCPtr, marshalBuffer_fallTimeDelay.PinnedBytes, channelList);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_fallTimeDelay.Dispose();
    }
  }

  public void GetFallTimeDelay(string channelList, out Ivi.Driver.PrecisionTimeSpan[] OUTPUT) {
    var marshaler_OUTPUT = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000IOControl_GetFallTimeDelay__SWIG_0(swigCPtr, channelList, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan[]);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void GetFallTimeDelay(Keysight.KtEL30000.MinMaxDefMode fallTimeDelay, string channelList, out Ivi.Driver.PrecisionTimeSpan[] OUTPUT) {
    var marshaler_OUTPUT = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000IOControl_GetFallTimeDelay__SWIG_1(swigCPtr, (int)fallTimeDelay, channelList, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan[]);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void SetFallTimeDelay(Keysight.KtEL30000.MinMaxDefMode fallTimeDelay, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000IOControl_SetFallTimeDelay__SWIG_1(swigCPtr, (int)fallTimeDelay, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetEnabled(bool ioEnabled, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000IOControl_SetEnabled(swigCPtr, ioEnabled, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BooleanVector GetEnabled(string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000IOControl_GetEnabled(swigCPtr, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetChannelCouple() {
    string ret = KtEL30000CppApiPINVOKE.KtEL30000IOControl_GetChannelCouple(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetChannelCouple(string value) {
    KtEL30000CppApiPINVOKE.KtEL30000IOControl_SetChannelCouple(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Keysight.KtEL30000.InhibitMode GetInhibitMode() {
    Keysight.KtEL30000.InhibitMode ret = (Keysight.KtEL30000.InhibitMode)KtEL30000CppApiPINVOKE.KtEL30000IOControl_GetInhibitMode(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInhibitMode(Keysight.KtEL30000.InhibitMode value) {
    KtEL30000CppApiPINVOKE.KtEL30000IOControl_SetInhibitMode(swigCPtr, (int)value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
