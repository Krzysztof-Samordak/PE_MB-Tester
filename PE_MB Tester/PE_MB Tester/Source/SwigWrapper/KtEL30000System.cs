//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000System : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000System(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000System obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000System() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000System(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public KtEL30000SystemTracing Tracing_
    {
        get { return Tracing(); }
    }

    public string SerialNumber
    {
        get { return GetSerialNumber(); }
    }

    public Ivi.Driver.PrecisionTimeSpan IOTimeout
    {
        get
        {
            var retValue = default(Ivi.Driver.PrecisionTimeSpan);
            GetIOTimeout(out retValue);
            return retValue;
        }
        set { SetIOTimeout(value); }
    }

    public Keysight.KtEL30000.PowerOnStateMode PowerOnStateMode
    {
        get { return GetPowerOnStateMode(); }
        set { SetPowerOnStateMode(value); }
    }

    public bool BeepEnabled
    {
        get { return GetBeepEnabled(); }
        set { SetBeepEnabled(value); }
    }
    public System.Byte[] ReadBytes()
    {
        var ret = default(System.Byte[]);
        this.ReadBytes(ref ret);
        return ret;
    }

  public void RecallState(int state) {
    KtEL30000CppApiPINVOKE.KtEL30000System_RecallState(swigCPtr, state);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveState(int state) {
    KtEL30000CppApiPINVOKE.KtEL30000System_SaveState(swigCPtr, state);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearIO() {
    KtEL30000CppApiPINVOKE.KtEL30000System_ClearIO(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ReadBytes(ref System.Byte[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Byte>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000System_ReadBytes(swigCPtr, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public string ReadString() {
    string ret = KtEL30000CppApiPINVOKE.KtEL30000System_ReadString(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void WaitForOperationComplete(Ivi.Driver.PrecisionTimeSpan maxTime) {
    var marshaler_maxTime = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_maxTime = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_maxTime.BufferSize);
    marshaler_maxTime.CSharpToBytes(maxTime, marshalBuffer_maxTime);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000System_WaitForOperationComplete(swigCPtr, marshalBuffer_maxTime.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_maxTime.Dispose();
    }
  }

  public void WriteBytes(System.Byte[] buffer) {
    var marshaler_buffer = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Byte>();
    var marshalBuffer_buffer = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_buffer.BufferSize);
    marshaler_buffer.CSharpToBytes(buffer, marshalBuffer_buffer);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000System_WriteBytes(swigCPtr, marshalBuffer_buffer.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_buffer.Dispose();
    }
  }

  public void WriteString(string data) {
    KtEL30000CppApiPINVOKE.KtEL30000System_WriteString(swigCPtr, data);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBeep() {
    KtEL30000CppApiPINVOKE.KtEL30000System_SetBeep(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public KtEL30000SystemTracing Tracing() {
    global::System.IntPtr cPtr = KtEL30000CppApiPINVOKE.KtEL30000System_Tracing(swigCPtr);
    KtEL30000SystemTracing ret = (cPtr == global::System.IntPtr.Zero) ? null : new KtEL30000SystemTracing(cPtr, true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetSerialNumber() {
    string ret = KtEL30000CppApiPINVOKE.KtEL30000System_GetSerialNumber(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetIOTimeout(out Ivi.Driver.PrecisionTimeSpan OUTPUT) {
    var marshaler_OUTPUT = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000System_GetIOTimeout(swigCPtr, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void SetIOTimeout(Ivi.Driver.PrecisionTimeSpan value) {
    var marshaler_value = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_value = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_value.BufferSize);
    marshaler_value.CSharpToBytes(value, marshalBuffer_value);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000System_SetIOTimeout(swigCPtr, marshalBuffer_value.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_value.Dispose();
    }
  }

  public Keysight.KtEL30000.PowerOnStateMode GetPowerOnStateMode() {
    Keysight.KtEL30000.PowerOnStateMode ret = (Keysight.KtEL30000.PowerOnStateMode)KtEL30000CppApiPINVOKE.KtEL30000System_GetPowerOnStateMode(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPowerOnStateMode(Keysight.KtEL30000.PowerOnStateMode value) {
    KtEL30000CppApiPINVOKE.KtEL30000System_SetPowerOnStateMode(swigCPtr, (int)value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetBeepEnabled() {
    bool ret = KtEL30000CppApiPINVOKE.KtEL30000System_GetBeepEnabled(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetBeepEnabled(bool value) {
    KtEL30000CppApiPINVOKE.KtEL30000System_SetBeepEnabled(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
