//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class IviDriverIdentity : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal IviDriverIdentity(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IviDriverIdentity obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IviDriverIdentity() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_IviDriverIdentity(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


    public string InstrumentManufacturer
    {
        get { return GetInstrumentManufacturer(); }
    }

    public string InstrumentModel
    {
        get { return GetInstrumentModel(); }
    }

    public string InstrumentFirmwareRevision
    {
        get { return GetInstrumentFirmwareRevision(); }
    }

    public string Identifier
    {
        get { return GetIdentifier(); }
    }

    public string Description
    {
        get { return GetDescription(); }
    }

    public string Revision
    {
        get { return GetRevision(); }
    }

    public string Vendor
    {
        get { return GetVendor(); }
    }

  public StringVector GetSupportedInstrumentModels() {
    StringVector ret = new StringVector(KtEL30000CppApiPINVOKE.IviDriverIdentity_GetSupportedInstrumentModels(swigCPtr), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetInstrumentManufacturer() {
    string ret = KtEL30000CppApiPINVOKE.IviDriverIdentity_GetInstrumentManufacturer(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetInstrumentModel() {
    string ret = KtEL30000CppApiPINVOKE.IviDriverIdentity_GetInstrumentModel(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetInstrumentFirmwareRevision() {
    string ret = KtEL30000CppApiPINVOKE.IviDriverIdentity_GetInstrumentFirmwareRevision(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetIdentifier() {
    string ret = KtEL30000CppApiPINVOKE.IviDriverIdentity_GetIdentifier(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetDescription() {
    string ret = KtEL30000CppApiPINVOKE.IviDriverIdentity_GetDescription(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetRevision() {
    string ret = KtEL30000CppApiPINVOKE.IviDriverIdentity_GetRevision(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetVendor() {
    string ret = KtEL30000CppApiPINVOKE.IviDriverIdentity_GetVendor(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
