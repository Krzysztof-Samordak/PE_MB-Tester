//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class IviDriverOperation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal IviDriverOperation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IviDriverOperation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IviDriverOperation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_IviDriverOperation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


    public string IOResourceDescriptor
    {
        get { return GetIOResourceDescriptor(); }
    }

    public bool QueryInstrumentStatus
    {
        get { return GetQueryInstrumentStatus(); }
        set { SetQueryInstrumentStatus(value); }
    }

    public bool Simulate
    {
        get { return GetSimulate(); }
        set { SetSimulate(value); }
    }

    public string DriverSetup
    {
        get { return GetDriverSetup(); }
    }
    private WarningKtEventHandlerAdapter _WarningAdapter = null;
    public  WarningKtEventHandlerAdapter WarningAdapter
    {
        get
        {
            if (_WarningAdapter == null)
                _WarningAdapter = new WarningKtEventHandlerAdapter(this.GetWarning());
            return _WarningAdapter;
        }
    }

  public string GetIOResourceDescriptor() {
    string ret = KtEL30000CppApiPINVOKE.IviDriverOperation_GetIOResourceDescriptor(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetQueryInstrumentStatus() {
    bool ret = KtEL30000CppApiPINVOKE.IviDriverOperation_GetQueryInstrumentStatus(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetQueryInstrumentStatus(bool value) {
    KtEL30000CppApiPINVOKE.IviDriverOperation_SetQueryInstrumentStatus(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetSimulate() {
    bool ret = KtEL30000CppApiPINVOKE.IviDriverOperation_GetSimulate(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSimulate(bool value) {
    KtEL30000CppApiPINVOKE.IviDriverOperation_SetSimulate(swigCPtr, value);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetDriverSetup() {
    string ret = KtEL30000CppApiPINVOKE.IviDriverOperation_GetDriverSetup(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WarningKtEvent GetWarning() {
    WarningKtEvent ret = new WarningKtEvent(KtEL30000CppApiPINVOKE.IviDriverOperation_GetWarning(swigCPtr), false);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
