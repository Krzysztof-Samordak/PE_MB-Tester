//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000OperationConstantPowerProtection : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000OperationConstantPowerProtection(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000OperationConstantPowerProtection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000OperationConstantPowerProtection() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000OperationConstantPowerProtection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public Ivi.Driver.PrecisionTimeSpan[] GetOPPDelayTime(string channelList)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan[]);
        this.GetOPPDelayTime(channelList, out ret);
        return ret;
    }
    public Ivi.Driver.PrecisionTimeSpan[] GetOPPDelayTime(Keysight.KtEL30000.MinMaxDefMode delayTime, string channelList)
    {
        var ret = default(Ivi.Driver.PrecisionTimeSpan[]);
        this.GetOPPDelayTime(delayTime, channelList, out ret);
        return ret;
    }

  public BooleanVector GetEnabled(string channelList) {
    BooleanVector ret = new BooleanVector(KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerProtection_GetEnabled(swigCPtr, channelList), true);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetOPPDelayTime(string channelList, out Ivi.Driver.PrecisionTimeSpan[] OUTPUT) {
    var marshaler_OUTPUT = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerProtection_GetOPPDelayTime__SWIG_0(swigCPtr, channelList, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan[]);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public void GetOPPDelayTime(Keysight.KtEL30000.MinMaxDefMode delayTime, string channelList, out Ivi.Driver.PrecisionTimeSpan[] OUTPUT) {
    var marshaler_OUTPUT = new Keysight.KtEL30000.NonBlittableArrayMarshaler<Ivi.Driver.PrecisionTimeSpan , Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler>();
    var marshalBuffer_OUTPUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_OUTPUT.BufferSize);

    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerProtection_GetOPPDelayTime__SWIG_1(swigCPtr, (int)delayTime, channelList, marshalBuffer_OUTPUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    OUTPUT = default(Ivi.Driver.PrecisionTimeSpan[]);
    marshalBuffer_OUTPUT.ResetOffset();
    marshaler_OUTPUT.BytesToCSharp(marshalBuffer_OUTPUT, ref OUTPUT);
    marshalBuffer_OUTPUT.Dispose();
    }
  }

  public bool IsTripped() {
    bool ret = KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerProtection_IsTripped(swigCPtr);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEnabled(bool enabled, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerProtection_SetEnabled(swigCPtr, enabled, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOPPDelayTime(Keysight.KtEL30000.MinMaxDefMode delayTime, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerProtection_SetOPPDelayTime__SWIG_0(swigCPtr, (int)delayTime, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOPPDelayTime(Ivi.Driver.PrecisionTimeSpan delayTime, string channelList) {
    var marshaler_delayTime = new Keysight.ApiCoreLibraries.PrecisionTimeSpanMarshaler();
    var marshalBuffer_delayTime = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_delayTime.BufferSize);
    marshaler_delayTime.CSharpToBytes(delayTime, marshalBuffer_delayTime);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000OperationConstantPowerProtection_SetOPPDelayTime__SWIG_1(swigCPtr, marshalBuffer_delayTime.PinnedBytes, channelList);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_delayTime.Dispose();
    }
  }

}

}
