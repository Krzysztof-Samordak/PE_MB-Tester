//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class ServiceRequestKtEvent : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ServiceRequestKtEvent(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ServiceRequestKtEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ServiceRequestKtEvent() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          KtEL30000CppApiPINVOKE.delete_ServiceRequestKtEvent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

        // overloading +=, -= operator is not permitted in C#, But we can get the same effect by overloading +, - operator
        public static ServiceRequestKtEvent operator + (ServiceRequestKtEvent ins,ServiceRequestKtEventHandler value)
        {
            return ins.addition_assign(value);
        }
    
        public static ServiceRequestKtEvent operator - (ServiceRequestKtEvent ins,ServiceRequestKtEventHandler value)
        {
            return ins.subtraction_assign(value);
        }
    
  public ServiceRequestKtEvent() : this(KtEL30000CppApiPINVOKE.new_ServiceRequestKtEvent(), true) {
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public ServiceRequestKtEvent addition_assign(ServiceRequestKtEventHandler pHandlerToAdd) {
    ServiceRequestKtEvent ret = new ServiceRequestKtEvent(KtEL30000CppApiPINVOKE.ServiceRequestKtEvent_addition_assign(swigCPtr, ServiceRequestKtEventHandler.getCPtr(pHandlerToAdd)), false);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ServiceRequestKtEvent subtraction_assign(ServiceRequestKtEventHandler pHandlerToRemove) {
    ServiceRequestKtEvent ret = new ServiceRequestKtEvent(KtEL30000CppApiPINVOKE.ServiceRequestKtEvent_subtraction_assign(swigCPtr, ServiceRequestKtEventHandler.getCPtr(pHandlerToRemove)), false);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void execute(ServiceRequestEventArgs args) {
    KtEL30000CppApiPINVOKE.ServiceRequestKtEvent_execute(swigCPtr, ServiceRequestEventArgs.getCPtr(args));
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
