//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class ServiceRequestKtEventHandler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ServiceRequestKtEventHandler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ServiceRequestKtEventHandler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ServiceRequestKtEventHandler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_ServiceRequestKtEventHandler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void OnEvent(ServiceRequestEventArgs args) {
    KtEL30000CppApiPINVOKE.ServiceRequestKtEventHandler_OnEvent(swigCPtr, ServiceRequestEventArgs.getCPtr(args));
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool IsSame(ServiceRequestKtEventHandler pHandler2) {
    bool ret = KtEL30000CppApiPINVOKE.ServiceRequestKtEventHandler_IsSame(swigCPtr, ServiceRequestKtEventHandler.getCPtr(pHandler2));
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsOwn() {
    bool ret = (SwigDerivedClassHasMethod("IsOwn", swigMethodTypes2) ? KtEL30000CppApiPINVOKE.ServiceRequestKtEventHandler_IsOwnSwigExplicitServiceRequestKtEventHandler(swigCPtr) : KtEL30000CppApiPINVOKE.ServiceRequestKtEventHandler_IsOwn(swigCPtr));
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ServiceRequestKtEventHandler() : this(KtEL30000CppApiPINVOKE.new_ServiceRequestKtEventHandler(), true) {
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnEvent", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateServiceRequestKtEventHandler_0(SwigDirectorOnEvent);
    if (SwigDerivedClassHasMethod("IsSame", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateServiceRequestKtEventHandler_1(SwigDirectorIsSame);
    if (SwigDerivedClassHasMethod("IsOwn", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateServiceRequestKtEventHandler_2(SwigDirectorIsOwn);
    KtEL30000CppApiPINVOKE.ServiceRequestKtEventHandler_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ServiceRequestKtEventHandler));
    return hasDerivedMethod;
  }

  private void SwigDirectorOnEvent(global::System.IntPtr args) {
    OnEvent(new ServiceRequestEventArgs(args, false));
  }

  private bool SwigDirectorIsSame(global::System.IntPtr pHandler2) {
    return IsSame(new ServiceRequestKtEventHandler(pHandler2, false));
  }

  private bool SwigDirectorIsOwn() {
    return IsOwn();
  }

  public delegate void SwigDelegateServiceRequestKtEventHandler_0(global::System.IntPtr args);
  public delegate bool SwigDelegateServiceRequestKtEventHandler_1(global::System.IntPtr pHandler2);
  public delegate bool SwigDelegateServiceRequestKtEventHandler_2();

  private SwigDelegateServiceRequestKtEventHandler_0 swigDelegate0;
  private SwigDelegateServiceRequestKtEventHandler_1 swigDelegate1;
  private SwigDelegateServiceRequestKtEventHandler_2 swigDelegate2;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(ServiceRequestEventArgs) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(ServiceRequestKtEventHandler) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
}

}
