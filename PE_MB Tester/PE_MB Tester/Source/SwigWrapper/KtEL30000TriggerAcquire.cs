//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Keysight.KtEL30000.Bridge {
[System.CodeDom.Compiler.GeneratedCode("swig","3.0")]

internal class KtEL30000TriggerAcquire : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal KtEL30000TriggerAcquire(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KtEL30000TriggerAcquire obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KtEL30000TriggerAcquire() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          KtEL30000CppApiPINVOKE.delete_KtEL30000TriggerAcquire(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    public System.Double[] GetCurrent(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetCurrent(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetCurrent(Keysight.KtEL30000.MinMaxDefMode currentLevel, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetCurrent(currentLevel, channelList, ref ret);
        return ret;
    }
    public System.Double[] GetVoltage(string channelList)
    {
        var ret = default(System.Double[]);
        this.GetVoltage(channelList, ref ret);
        return ret;
    }
    public System.Double[] GetVoltage(Keysight.KtEL30000.MinMaxDefMode levelValue, string channelList)
    {
        var ret = default(System.Double[]);
        this.GetVoltage(levelValue, channelList, ref ret);
        return ret;
    }
    public Keysight.KtEL30000.AcquireTriggerSource[] GetTriggerSource(string channelList)
    {
        var ret = default(Keysight.KtEL30000.AcquireTriggerSource[]);
        this.GetTriggerSource(channelList, ref ret);
        return ret;
    }
    public Keysight.KtEL30000.Slope[] GetVoltageSlope(string channelList)
    {
        var ret = default(Keysight.KtEL30000.Slope[]);
        this.GetVoltageSlope(channelList, ref ret);
        return ret;
    }
    public Keysight.KtEL30000.Slope[] GetCurrentSlope(string channelList)
    {
        var ret = default(Keysight.KtEL30000.Slope[]);
        this.GetCurrentSlope(channelList, ref ret);
        return ret;
    }

  public void GetCurrent(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_GetCurrent__SWIG_0(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetCurrent(Keysight.KtEL30000.MinMaxDefMode currentLevel, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_GetCurrent__SWIG_1(swigCPtr, (int)currentLevel, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetVoltage(string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_GetVoltage__SWIG_0(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void GetVoltage(Keysight.KtEL30000.MinMaxDefMode levelValue, string channelList, ref System.Double[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.BlittableArrayMarshaler<System.Double>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_GetVoltage__SWIG_1(swigCPtr, (int)levelValue, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void Immediate(string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_Immediate(swigCPtr, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCurrent(Keysight.KtEL30000.MinMaxDefMode currentValue, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_SetCurrent__SWIG_0(swigCPtr, (int)currentValue, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCurrent(double currentValue, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_SetCurrent__SWIG_1(swigCPtr, currentValue, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVoltage(Keysight.KtEL30000.MinMaxDefMode levelValue, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_SetVoltage__SWIG_0(swigCPtr, (int)levelValue, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVoltage(double levelValues, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_SetVoltage__SWIG_1(swigCPtr, levelValues, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTriggerSource(string channelList, ref Keysight.KtEL30000.AcquireTriggerSource[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.EnumArrayMarshaler<Keysight.KtEL30000.AcquireTriggerSource>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_GetTriggerSource(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetTriggerSource(Keysight.KtEL30000.AcquireTriggerSource acquireTriggerSource, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_SetTriggerSource(swigCPtr, (int)acquireTriggerSource, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetVoltageSlope(string channelList, ref Keysight.KtEL30000.Slope[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.EnumArrayMarshaler<Keysight.KtEL30000.Slope>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_GetVoltageSlope(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

  public void SetVoltageSlope(Keysight.KtEL30000.Slope voltageSlope, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_SetVoltageSlope(swigCPtr, (int)voltageSlope, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCurrentSlope(Keysight.KtEL30000.Slope currentSlope, string channelList) {
    KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_SetCurrentSlope(swigCPtr, (int)currentSlope, channelList);
    if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetCurrentSlope(string channelList, ref Keysight.KtEL30000.Slope[] INOUT) {
    var marshaler_INOUT = new Keysight.ApiCoreLibraries.EnumArrayMarshaler<Keysight.KtEL30000.Slope>();
    var marshalBuffer_INOUT = new Keysight.ApiCoreLibraries.MarshalBuffer(marshaler_INOUT.BufferSize);
    marshaler_INOUT.CSharpToBytes(INOUT, marshalBuffer_INOUT);
    try {
      KtEL30000CppApiPINVOKE.KtEL30000TriggerAcquire_GetCurrentSlope(swigCPtr, channelList, marshalBuffer_INOUT.PinnedBytes);
      if (KtEL30000CppApiPINVOKE.SWIGPendingException.Pending) throw KtEL30000CppApiPINVOKE.SWIGPendingException.Retrieve();
    } finally {
    marshalBuffer_INOUT.ResetOffset();
    marshaler_INOUT.BytesToCSharp(marshalBuffer_INOUT, ref INOUT);
    marshalBuffer_INOUT.Dispose();
    }
  }

}

}
